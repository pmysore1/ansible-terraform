---
- name: Yum Install Packages
  yum: 
   name: 
      - wget
   state: present
  
- name: terraform install
  unarchive:
    src: "{{TERRAFORM_DOWNLOAD_PATH}}"
    dest: /usr/sbin
    remote_src: True
    creates: /usr/sbin/terraform

#- name: Clone terraform project
#  command: git clone {{ GIT_URL }} chdir="{{ TMP_DIR }}" 
- name: clone Terraform Git repository
  git:
   repo: "{{ GIT_URL }}"
   dest: "{{ TMP_DIR }}/ansible-terraform"
   force: yes

- name: Copy input.tfvars to terraform working directory
  template: src=input.tfvars dest="{{terraform_working_dir}}\input.tfvars" mode=0755
#- name: Copy input.tfvars to terraform working directory
 # template:
  #  src: input.tfvars
   # dest: {{ terraform_working_dir }}\input.tfvars
    #mode: "0755"


- name: Run Terraform init
  command: terraform init -backend-config="bucket={{TFSTATES_S3_BUCKET }}" -backend-config="key={{ TFSTATES_S3_KEY }}" -backend-config="region={{ TFSTATES_S3_REGION }}" chdir="{{ terraform_working_dir }}"

- name: Terraform command "{{ terraform_state }}"
  command: terraform "{{ terraform_state }}" -var-file=input.tfvars chdir="{{terraform_working_dir }}"
  when: terraform_state == 'plan'

- name: Terraform apply or destroy task; state passed - "{{ terraform_state }} "
  command: terraform "{{ terraform_state }}" -var-file=input.tfvars --auto-approve chdir="{{ terraform_working_dir }}"
  when: ((terraform_state == 'apply') or  (terraform_state =='destroy'))
